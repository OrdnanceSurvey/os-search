/**
 * @license osel-search - v0.0.4-republshed - 14-03-2017
 * (c) 2015 Ordnance Survey Limited
 * License: MIT
 */
!function(){angular.module("osel-search",["rx","ngMaterial"])}(),function(){var a=["observeOnScope","$http","rx"],b=function(a,b,c){return{templateUrl:"templates/osel-search.html",scope:{options:"=oselSearch"},link:function(d,e,f){var g=200;// use this if $scope.options.buffer is not set
// ---------- variables setup start -----------
d.options=d.options||{},d.options.providers=d.options.providers||[],d.allProviders=d.options.providers.reduce(function(a,b){return b.hasOwnProperty("providers")?a.concat(b.providers):(a.push(b),a)},[]),d.options.placeholder=d.options.hasOwnProperty("placeholder")?d.options.placeholder:"Start typing to search",d.searchResults={},
// turn $scope.allProviders into a hashmap, with provider.id as the keys
d.searchProviders=d.allProviders.reduce(function(a,b){return a[b.id]=b,a},{});
// ---------- variables setup end -----------
// turn search provider JSON into an rx.Observable, with a URL including the search term
var h=function(a,d){var e=a.url;angular.isFunction(a.url)&&(e=a.url(d));var f={params:angular.copy(a.params),data:angular.copy(a.data),dataType:a.dataType,url:e,method:a.method};
// inject search term into params and data
for(var g in f.params)f.params[g]=f.params[g].replace("%s",d);for(g in f.data)f.data[g]=f.data[g].replace("%s",d);return c.Observable.fromPromise(b(f))},i=function(a,b){
//return rx.Observable.fromCallback(fn)(term);
return c.Observable.create(function(c){try{var d=a.call(this,b);
// if result is a promise, then listen for resolve/reject.  Otherwise, use value immediately
angular.isFunction(d.then)?d.then(function(a){c.onNext(a),c.onCompleted()}).catch(function(a){c.onError(a)}):(c.onNext(d),c.onCompleted())}catch(e){c.onError(e)}})},j=function(a,b){
// check if provider is 'function' type
// check if provider is 'function' type
return a.hasOwnProperty("fn")?i(a.fn,b):h(a,b)};// ignore duplicate searches if value didn't change since last search
// fire off requests to providers based on throttled search term
a(d,"searchInput").debounce(d.options.buffer||g).map(function(a){return a.newValue}).distinctUntilChanged().filter(function(a){
// only search on 3+ characters
// reset the search results for each provider whenever input changes
return d.allProviders.forEach(function(a){d.searchResults[a.id]=d.searchResults[a.id]||{},d.searchResults[a.id].providerId=a.id,// need to save the id because orderObjectBy changes Object into an Array
d.searchResults[a.id].results=[]}),a&&a.length&&a.length>2}).subscribe(function(a){d.allProviders.map(function(b){d.$apply(function(){d.searchResults[b.id].inProgress=!0,d.searchResults[b.id].results=[],d.searchResults[b.id].error=void 0,d.searchResults[b.id].received=1/0});var c=j(b,a);return c.providerId=b.id,c.term=a,c.sent=new Date,c.config=b,c}).forEach(function(a){a.subscribe(function(b){
// changing scope from outside angular, so $apply
d.$apply(function(){
// call tranformResponse function if provided
a.config.transformResponse&&(b=a.config.transformResponse.call(this,b)),
// check that response is for the current search term
d.searchInput===a.term&&(d.searchResults[a.providerId].inProgress=!1,d.searchResults[a.providerId].results=b.results,d.searchResults[a.providerId].error="",d.searchResults[a.providerId].sent=a.sent,d.searchResults[a.providerId].received=new Date)})},function(b){d.searchResults[a.providerId].inProgress=!1,d.searchResults[a.providerId].results=[],d.searchResults[a.providerId].error=b.data?b.data.error:b.data,// TODO check this logic with a real server error
d.searchResults[a.providerId].received=1/0,// needs to be Infinity so that we can sort errors to the right
d.searchResults[a.providerId].sent=a.sent})})}),
// call onSelect function if provided.
d.selectResult=function(a,b){b&&b.call(null,a),d.searchInput=a.text},d.aggregateLength=function(a){return a.providers.reduce(function(a,b){return b&&d.searchResults[b.id]?a+(d.searchResults[b.id].results||[]).length:a},0)}}}};angular.module("osel-search").directive("oselSearch",a.concat([b]))}();